// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addFeedFollow = `-- name: AddFeedFollow :one
WITH feedfollow AS (
INSERT INTO gator.feed_follows (created_at, updated_at, user_id, feed_id)
VALUES (
    NOW(),
    NOW(),
    $1,
    $2
)

RETURNING id, created_at, updated_at, user_id, feed_id
) 

SELECT feedfollow.id, feedfollow.created_at, feedfollow.updated_at, feedfollow.user_id, feedfollow.feed_id, u.name AS user_name, f.name as feed_name
FROM feedfollow
JOIN gator.users u on u.id = feedfollow.user_id
JOIN gator.feeds f on f.id = feedfollow.feed_id
`

type AddFeedFollowParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

type AddFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) AddFeedFollow(ctx context.Context, arg AddFeedFollowParams) (AddFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, addFeedFollow, arg.UserID, arg.FeedID)
	var i AddFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollowForUser = `-- name: DeleteFeedFollowForUser :exec
DELETE FROM gator.feed_follows
WHERE user_id = $1
AND feed_id = $2
`

type DeleteFeedFollowForUserParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) DeleteFeedFollowForUser(ctx context.Context, arg DeleteFeedFollowForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowForUser, arg.UserID, arg.FeedID)
	return err
}

const getFeedsForUser = `-- name: GetFeedsForUser :many
SELECT f.id, f.created_at, f.updated_at, f.name, f.url, f.added_by, f.last_fetched_at, u.name AS user_name
FROM gator.feed_follows ff
JOIN gator.users u on ff.user_id = u.id
JOIN gator.feeds f on ff.feed_id = f.id
WHERE ff.user_id = $1
`

type GetFeedsForUserRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Url           string
	AddedBy       uuid.UUID
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeedsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForUserRow
	for rows.Next() {
		var i GetFeedsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.AddedBy,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
