// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO gator.posts (created_at, updated_at, title, url, description, published_at, feed_id)
VALUES (NOW(),
        NOW(),
        $1,
        $2,
        $3,
        $4,
        $5
)
`

type CreatePostParams struct {
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT p.title, p.url, p.description, p.published_at FROM gator.posts p
JOIN gator.feeds f on p.feed_id = f.id
WHERE f.added_by = $1
ORDER BY p.published_at DESC
LIMIT $2
`

type GetUserPostsParams struct {
	AddedBy uuid.UUID
	Limit   int32
}

type GetUserPostsRow struct {
	Title       string
	Url         string
	Description sql.NullString
	PublishedAt sql.NullTime
}

func (q *Queries) GetUserPosts(ctx context.Context, arg GetUserPostsParams) ([]GetUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, arg.AddedBy, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsRow
	for rows.Next() {
		var i GetUserPostsRow
		if err := rows.Scan(
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
