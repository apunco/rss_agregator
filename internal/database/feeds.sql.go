// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO gator.feeds (created_at, updated_at, name, url, added_by)
VALUES (NOW(),
        NOW(),
        $1,
        $2,
        $3
)
RETURNING id, created_at, updated_at, name, url, added_by, last_fetched_at
`

type AddFeedParams struct {
	Name    string
	Url     string
	AddedBy uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (GatorFeed, error) {
	row := q.db.QueryRowContext(ctx, addFeed, arg.Name, arg.Url, arg.AddedBy)
	var i GatorFeed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.AddedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, created_at, updated_at, name, url, added_by, last_fetched_at FROM gator.feeds
WHERE url = $1
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (GatorFeed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i GatorFeed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.AddedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT id, created_at, updated_at, name, url, added_by, last_fetched_at FROM gator.feeds
`

func (q *Queries) GetFeeds(ctx context.Context) ([]GatorFeed, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GatorFeed
	for rows.Next() {
		var i GatorFeed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.AddedBy,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :one
SELECT id, created_at, updated_at, name, url, added_by, last_fetched_at from gator.feeds
ORDER BY last_fetched_at asc
NULLS FIRST
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) (GatorFeed, error) {
	row := q.db.QueryRowContext(ctx, getNextFeedToFetch)
	var i GatorFeed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.AddedBy,
		&i.LastFetchedAt,
	)
	return i, err
}

const markedFeedFetched = `-- name: MarkedFeedFetched :exec
UPDATE gator.feeds
SET updated_at = NOW(),
last_fetched_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkedFeedFetched(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markedFeedFetched, id)
	return err
}
